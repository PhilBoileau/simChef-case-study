
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ################################################################################
> # Simulation Script
> ################################################################################
> 
> # load required libraries
> library(here)
here() starts at /global/home/users/philippe_boileau/projects/simChef-case-study
> library(dplyr)

Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

> library(tibble)
> library(MASS)

Attaching package: 'MASS'

The following object is masked from 'package:dplyr':

    select

> library(glmnet)
Loading required package: Matrix
Loaded glmnet 4.1-2
> library(uniCATE)
> library(personalized)
Loading required package: mgcv
Loading required package: nlme

Attaching package: 'nlme'

The following object is masked from 'package:dplyr':

    collapse

This is mgcv 1.8-33. For overview type 'help("mgcv-package")'.
Loading required package: gbm
Loaded gbm 2.1.8
Loading required package: ggplot2
Loading required package: plotly

Attaching package: 'plotly'

The following object is masked from 'package:ggplot2':

    last_plot

The following object is masked from 'package:MASS':

    select

The following object is masked from 'package:stats':

    filter

The following object is masked from 'package:graphics':

    layout

> library(ggplot2)
> library(simChef)
> library(future)
> 
> # set up parallelization
> plan(multisession, workers = 40L)
> 
> # define the data-generating process objects
> source(here("R/dgps-functions/lm-with-tem.R"))
> source(here("R/dgps-functions/kinked-with-tem.R"))
> source(here("R/dgps-functions/nlm-with-tem.R"))
> linear_dgp <- create_dgp(.dgp_fun = lm_tem_fun)
> kinked_dgp <- create_dgp(.dgp_fun = kinked_tem_fun)
> nonlinear_dgp <- create_dgp(.dgp_fun = nlm_tem_fun)
> 
> # define the method objects
> source(here("R/method-functions/uniCATE.R"))
> source(here("R/method-functions/modified-covariates.R"))
> source(here("R/method-functions/augmented-modified-covariates.R"))
> unicate_lasso_method <- create_method(.method_fun = unicate_fun, use_sl = FALSE)
> unicate_sl_method <- create_method(.method_fun = unicate_fun, use_sl = TRUE)
> mod_cov_method <- create_method(.method_fun = mod_cov_fun)
> aug_mod_cov_method <- create_method(.method_fun = aug_mod_cov_fun)
> 
> # define the FDR evaluator objects
> source(here("R/evaluator-functions/fdr.R"))
> source(here("R/evaluator-functions/tpr.R"))
> source(here("R/evaluator-functions/tnr.R"))
> fdr_eval <- create_evaluator(.eval_fun = fdr_fun)
> tpr_eval <- create_evaluator(.eval_fun = tpr_fun)
> tnr_eval <- create_evaluator(.eval_fun = tnr_fun)
> 
> # define the visualizer objects
> source(here("R/visualizer-functions/classification-summary-plot.R"))
> summary_plot <- create_visualizer(.viz_fun = summary_plot_fun)
> 
> # meal prep
> experiment <- create_experiment(name = "empirical-fdr-comparison") %>%
+   add_dgp(linear_dgp, name = "LM with TEM") %>%
+   add_dgp(kinked_dgp, name = "Kinked with TEM") %>%
+   add_dgp(nonlinear_dgp, name = "NLM with TEM") %>%
+   # is there a way to vary across all DGPs at the same time
+   add_vary_across(.dgp = "LM with TEM", n = c(125, 250, 500)) %>%
+   add_vary_across(.dgp = "Kinked with TEM", n = c(125, 250, 500)) %>%
+   add_vary_across(.dgp = "NLM with TEM", n = c(125, 250, 500)) %>%
+   add_method(unicate_lasso_method, name = "uniCATE (LASSO)") %>%
+ #   add_method(unicate_sl_method, name = "uniCATE (SL)") %>%
+   add_method(mod_cov_method, name = "Modified Covariates") %>%
+   add_method(aug_mod_cov_method, name = "Augmented Modified Covariates") %>%
+   add_evaluator(fdr_eval, name = "Empirical FDR") %>%
+   add_evaluator(tpr_eval, name = "Empirical TPR") %>%
+   add_evaluator(tnr_eval, name = "Empirical TNR") %>%
+   add_visualizer(summary_plot, name = "Summary Plot")
> 
> # put it in the oven
> set.seed(510)
> results <- experiment$run(n_reps = 200, save = TRUE)
Fitting empirical-fdr-comparison...
Saving fit results...
Fit results saved | time taken: 0.252786 seconds
200 reps completed (totals: 200/200) | time taken: 17.675338 minutes
==============================
Evaluating empirical-fdr-comparison...
Evaluation completed | time taken: 0.005918 minutes
Saving eval results...
Eval results saved | time taken: 0.065858 seconds
==============================
Visualizing empirical-fdr-comparison...
Visualization completed | time taken: 0.000757 minutes
Saving viz results...
Viz results saved | time taken: 0.086646 seconds
==============================
> 
> 
> proc.time()
    user   system  elapsed 
 114.207    3.580 1082.753 
